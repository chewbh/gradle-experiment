//apply from: 'gradle/plugins.gradle'

buildscript {

  repositories {
    maven { url 'http://192.168.8.2/artifactory/gradle-all' }
  }

  ext {
    springBootVersion = "1.3.8.RELEASE" // v1.3.1.RELEASE
  }

  dependencies {
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
    classpath "com.netflix.nebula:nebula-release-plugin:latest.release"
  }
}

description = "An experiment on gradle"

task wrapper(type: Wrapper) {
  gradleVersion = '3.4.1'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"

}

// the extra property projectIds declared in the root project is available to the subprojects
ext.projectIds = [
  'group': 'io.boonheng',
//  'version': '1.0.0'
]

allprojects {

  group = projectIds.group
//  version = projectIds.version

  apply plugin: 'idea'
  apply from: "$rootDir/gradle/version-strategy.gradle"


  repositories {
    maven { url 'http://192.168.8.2/artifactory/gradle-all' }
  }
}

configure(subprojects - project(':frontend')) {
//  println "applying java plugin to $project"
  apply plugin: 'java'
  apply plugin: 'spring-boot'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  // Configure the test task to run tests in parallel
  test.maxParallelForks = getMaxParallels()
}

Integer getMaxParallels() {
  println "actual core is ${Runtime.runtime.availableProcessors()}"
  int max_cores = Runtime.runtime.availableProcessors()
  if (max_cores - 1 <= 1) max_cores else max_cores - 1
}
